# -*- coding: utf-8 -*-
"""Análisis de Datos Exploratorio - Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K19rfYPf0rslnvWWorMCE1lFdCUXoc_O

# Exploración de datos del Titanic

En este notebook, contestaremos preguntas alrededor de los datos disponibles del Titanic. Repasaremos los temas de cómo crear funciones, cómo manipular datos con Pandas y repasaremos conceptos sobre valores duplicados y valores ausentes.

Empecemos importando los datos y viendo las primeras filas de este dataset.

Si le das doble click a cada recuadro de texto, aparecerá un tip sobre cómo resolver el problema. Inténtalo sobre este recuadro de texto.

<!--
Este es un tip!
-->
"""

import seaborn as sns

titanic_df = sns.load_dataset('titanic')
titanic_df.head(5)
titanic_df.info()

#survival - Survival (0 = No; 1 = Yes)
#class - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)
#name - Name
#sex - Sex
#age - Age
#sibsp - Number of Siblings/Spouses Aboard
#parch - Number of Parents/Children Aboard
#ticket - Ticket Number
#fare - Passenger Fare
#cabin - Cabin
#embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)
#boat - Lifeboat (if survived)
#body - Body number (if did not survive and body was recovered)

"""Una breve descripción sobre cada columna es muy útil para entender el contexto del problema. Este es un link donde podrán encontrar dicha información: https://github.com/awesomedata/awesome-public-datasets/issues/351.

<!--
Tip: Recuerda que la función .head() arroja las primeras líneas de un DataFrame.
-->
"""

# Arroja las primeras 5 líneas de este dataset
titanic_df.head(5)

"""## Valores nulos

Algo que es común preguntar es si los datos tienen valores nulos. A continuación, arroja cuántos valores nulos tiene cada columna.

<!---
Tip: Usa la función .isna() junto con con la función sum() para obtener el resultado.
-->
"""

# Arroja los valores nulos por columna

titanic_df.isnull().sum()

"""¿Existirá algún patrón sobre los valores ausentes en las columnas `age` y `deck`? Intentemos calcular los valores ausentes por grupos.

Escribe un pedazo de código que calcule los valores nulos en `deck` por grupos en las columnas `sex`, `survived` y `class`.

Dado que vamos a estar repitiendo el mismo proceso de contar valores nulos por grupos en diferentes columnas, escribamos una función para no repetir el mismo código sobre cada una de las columnas. ¿Qué argumentos debería de aceptar la función?

<!--
Tip: los argumentos de una función es algo que va a "variar" para hacer el cálculo de manera diferente. Aquí lo que va a variar es la columna usada para formar los grupos.
Tip: recuerda usar primero el método .groupby() para hacer este cálculo. 
-->
"""

# Escribe una función para calcular la cantidad de valores nulos por grupo en una columna.
titanic_df.loc[titanic_df['deck'].isna(),:]

titanic_df.groupby['sex', 'class']

# Usa tu función para arrojar la cantidad de valores nulos en 'deck' para grupos de 'sex', 'survived' y 'class'

titanic_df.isna().groupby(titanic_df['sex']).sum()

titanic_df_deck = titanic_df.loc[titanic_df['deck']]

titanic_df_deck.groupby(['sex','class','survived']).count()[["age"]]

"""¿Existe algún patrón visible? ¿Crees que sea necesario rellenar esta columna de alguna manera?"""

# Usa la función que acabas de escribir para hacer más exploraciones

"""Ahora hagamos lo mismo para la columna `age`. ¿Existe algún patrón visible entre valores nulos de esta columna y valores de alguno de los grupos dentro de `sex`, `survived` o `class`?

En caso de que no, ¿habrá alguna columna con el que podamos descubrir si existe hay algún patrón?
"""

# Usa la función que acabas de escribir para calcular los valores nulos por grupos de columnas
titanic_df.isna().groupby([titanic_df['class'], titanic_df['survived']]).sum()

"""## Valores ausentes

En caso de que sea necesario, rellenemos la columna `age` con algún valor como la media o la mediana.

Usa el método `.apply()` para rellenar con la media o la mediana los valores nulos en `age`. Aquí hay un link donde puedes encontrar la respuesta sobre cómo usar este método.

[Respuesta de Stack Overflow](https://stackoverflow.com/questions/19966018/pandas-filling-missing-values-by-mean-in-each-group)

El método `.transform()` es muy similar al método `.apply()`. En este ejemplo, puedes intercambiar entre ambos métodos sin perjuicio.

[Diferencias entre `.transform()` y `.apply()`](https://stackoverflow.com/questions/27517425/apply-vs-transform-on-a-group-object)

<!--
Tip: aquí el tip es revisar la respuesta en Stack Overflow
-->
"""

# Rellena los valores nulos en 'age' usando el método .apply()

"""## Análisis exploratorio

Una de las preguntas más frecuentes que le hacemos a este dataset es ver si hay una relación entre alguna de las variables y la probabilidad de supervivencia en el Titanic.

¿Cuál columna indica si un pasajero sobrevivió el accidente o no?

Una manera de calcular una probabilidad es tomando una frecuencia relativa (número de eventos de interés / número de eventos totales). Con un número suficientemente grande de eventos totales, la frecuencia relativa debería de converger a la probabilidad de que suceda el evento de interés.

Veamos si existe una relación entre alguna de las variables incluidas en el dataset y la probabilidad de supervivencia.

Usemos el método `pivot_table()` para calcular frecuencias relativas. Construyamos una función que ejecute este método para calcular las frecuencias relativas por grupos de alguna o varias columnas.

<!--
Tip: Una frecuencia relativa es la división entre el conteo de eventos de interés y los eventos totales, o sea, un sum() dividido por un count().
-->
"""

# Contruye una función que calcule las frecuencias relativas por grupos de una columna

# Explora las probabilidades de supervivencia por diferentes grupos de una o varias columnas

"""## Extra - Presentando resultados

La mejor manera de presentar resultados es siempre visualizando los resultados. Usa la librería de tu preferencia para mostrar resultados interesantes que hayas encontrado.

La documentación de librerías para visualizar datos tienen muchos ejemplos de visualizaciones que puedes crear. Aquí hay unos links para explorar estas librerías:

- [Matplotlib](https://matplotlib.org/stable/gallery/)
- [Seaborn](https://seaborn.pydata.org/examples/index.html)
"""

